version: "3.9"

networks:
  network:
    driver: bridge

services:
  frontend:
    container_name: frontend
    hostname: frontend
    environment:
      - REACT_APP_BACKEND=nginx
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        - REACT_APP_BACKEND=/vpasport
    ports:
      - "3000:3000"
    user: root
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - backend
    volumes:
      - static-content:/term-front

  backend:
    container_name: backend
    hostname: backend
    build: ./back
    depends_on:
      redis:
        condition: service_healthy
    environment:
      #REDIS
      - REDIS_PORT=6379
      - REDIS_TIMEOUT=200ms
    ports:
      - "8080:8080"
    networks:
      - network
    user: root
    restart: on-failure

  redis:
    container_name: storage
    hostname: redis
    image: redis:4-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_REPLICATION_MODE=master
    networks:
      - network
    restart: on-failure

  nginx:
    image: nginx:alpine
    hostname: nginx
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    networks:
      - network
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/app.conf:/etc/nginx/conf.d/default.conf
      - static-content:/term-front
      - ./certbot:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

volumes:
  static-content:
  certbot:
